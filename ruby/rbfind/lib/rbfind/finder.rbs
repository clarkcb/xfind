module RbFind
  # Finder - finds files according to settings
  class Finder
    @settings: FindSettings
    @file_types: FileTypes

    attr_reader settings: FindSettings

    def initialize: (FindSettings settings) -> void

    def filter_dir_by_hidden?: (Pathname dir_path) -> bool

    def filter_dir_by_in_patterns?: (Pathname dir_path) -> bool

    def filter_dir_by_out_patterns?: (Pathname dir_path) -> bool

    def matching_dir?: (Pathname dir_path) -> bool

    def has_matching_archive_ext?: (FileResult file_result) -> bool

    def has_matching_ext?: (FileResult file_result) -> bool

    def matching_archive_file_name?: (String file_name) -> bool

    def has_matching_archive_file_name?: (FileResult file_result) -> bool

    def matching_file_name?: (String file_name) -> bool

    def has_matching_file_name?: (FileResult file_result) -> bool

    def matching_file_type?: (FileType file_type) -> bool

    def has_matching_file_type?: (FileResult file_result) -> bool

    def matching_file_size?: (Integer file_size) -> bool

    def has_matching_file_size?: (FileResult file_result) -> bool

    def matching_last_mod?: (nil | Time last_mod) -> bool

    def has_matching_last_mod?: (FileResult file_result) -> bool

    def matching_archive_file_result?: (FileResult file_result) -> bool

    def matching_file_result?: (FileResult file_result) -> bool

    def matching_archive_file?: (Pathname file_path) -> bool

    def matching_file?: (Pathname file_path) -> bool

    def filter_to_file_result: (Pathname file_path) -> (nil | FileResult)

    def find: () -> Array[FileResult]

    def print_dir_results: (Array[FileResult] file_results, FileResultFormatter formatter) -> void

    def print_file_results: (Array[FileResult] file_results, FileResultFormatter formatter) -> void

    private

    def validate_settings: () -> void

    def matches_any_pattern?: (String str, Set[Regexp] pattern_set) -> bool

    def any_matches_any_pattern?: (Array[String] str_list, Set[Regexp] pattern_set) -> bool

    def rec_get_file_results_for_path: (Pathname dir_path, Integer min_depth, Integer max_depth, Integer current_depth) -> Array[FileResult]

    def get_file_results_for_path: (Pathname file_path) -> Array[FileResult]

    def file_path_to_file_result: (Pathname file_path) -> FileResult
  end
end
